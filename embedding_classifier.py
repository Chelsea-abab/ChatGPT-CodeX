"""MLP-based classifier for embeddings.

This module provides a simple MLP classifier and training utilities
for classifying embeddings generated by `get_embedding_from_raw`.
"""

from typing import Dict, Iterable, List, Sequence, Tuple

import numpy as np
import torch
from torch import nn
from torch.utils.data import DataLoader, Dataset
from sklearn.metrics import accuracy_score, f1_score, roc_auc_score


class EmbeddingDataset(Dataset):
    """Dataset wrapping pre-computed embeddings and labels."""

    def __init__(self, embeddings: Sequence[np.ndarray], labels: Sequence[int]):
        self.embeddings = [torch.tensor(e, dtype=torch.float32) for e in embeddings]
        self.labels = torch.tensor(labels, dtype=torch.long)

    def __len__(self) -> int:  # type: ignore[override]
        return len(self.labels)

    def __getitem__(self, idx: int) -> Tuple[torch.Tensor, torch.Tensor]:  # type: ignore[override]
        return self.embeddings[idx], self.labels[idx]


class MLPClassifier(nn.Module):
    def __init__(self, embedding_dim=EMBED_DIM, num_classes=NUM_CLASSES, use_three_layers=False):
        super().__init__()
        self.use_three = use_three_layers
        self.fc1 = nn.Linear(embedding_dim, H1)
        self.bn1 = nn.BatchNorm1d(H1)
        self.fc2 = nn.Linear(H1, H2)
        self.bn2 = nn.BatchNorm1d(H2)
        if self.use_three:
            self.fc3 = nn.Linear(H2, H3)
            self.bn3 = nn.BatchNorm1d(H3)
            self.fc_out = nn.Linear(H3, num_classes)
        else:
            self.fc_out = nn.Linear(H2, num_classes)
        self.dropout = nn.Dropout(0.3)
    def forward(self, x):
        x = F.relu(self.bn1(self.fc1(x)))
        x = self.dropout(x)
        x = F.relu(self.bn2(self.fc2(x)))
        x = self.dropout(x)
        if self.use_three:
            x = F.relu(self.bn3(self.fc3(x)))
            x = self.dropout(x)
        logits = self.fc_out(x)
        return logits


def evaluate_metrics(
    model: nn.Module,
    embeddings: Sequence[np.ndarray],
    labels: Sequence[int],
    criterion: nn.Module,
    batch_size: int = 32,
    device: torch.device | None = None,
) -> Dict[str, float]:
    """Compute loss, accuracy, F1 and AUC for a dataset."""
    if device is None:
        device = next(model.parameters()).device
    dataset = EmbeddingDataset(embeddings, labels)
    dataloader = DataLoader(dataset, batch_size=batch_size)
    model.eval()
    total_loss = 0.0
    all_probs: List[np.ndarray] = []
    all_labels: List[int] = []
    with torch.no_grad():
        for x, y in dataloader:
            x = x.to(device)
            y = y.to(device)
            logits = model(x)
            loss = criterion(logits, y)
            probs = torch.softmax(logits, dim=1)
            total_loss += loss.item() * x.size(0)
            all_probs.append(probs.cpu().numpy())
            all_labels.extend(y.cpu().numpy().tolist())

    all_probs_np = np.concatenate(all_probs, axis=0)
    all_labels_np = np.array(all_labels)
    preds = all_probs_np.argmax(axis=1)
    acc = accuracy_score(all_labels_np, preds)
    f1 = f1_score(all_labels_np, preds, average="macro")
    try:
        auc = roc_auc_score(all_labels_np, all_probs_np, multi_class="ovr")
    except ValueError:
        auc = float("nan")
    avg_loss = total_loss / len(dataset)
    return {"loss": avg_loss, "acc": acc, "f1": f1, "auc": auc}


def train_mlp_classifier(
    train_embeddings: Sequence[np.ndarray],
    train_labels: Sequence[int],
    num_classes: int,
    val_embeddings: Sequence[np.ndarray] | None = None,
    val_labels: Sequence[int] | None = None,
    hidden_dims: Iterable[int] = (256, 128),
    dropout: float = 0.1,
    lr: float = 1e-3,
    epochs: int = 10,
    batch_size: int = 32,
    device: torch.device | None = None,
) -> MLPClassifier:
    """Train an MLP classifier from pre-computed embeddings."""

    if device is None:
        device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

    input_dim = int(np.array(train_embeddings[0]).shape[0])
    model = MLPClassifier(
        input_dim=input_dim,
        num_classes=num_classes,
        hidden_dims=hidden_dims,
        dropout=dropout,
    ).to(device)

    dataset = EmbeddingDataset(train_embeddings, train_labels)
    dataloader = DataLoader(dataset, batch_size=batch_size, shuffle=True)

    optimizer = torch.optim.Adam(model.parameters(), lr=lr)
    criterion = nn.CrossEntropyLoss()

    for epoch in range(1, epochs + 1):
        model.train()
        for x, y in dataloader:
            x = x.to(device)
            y = y.to(device)
            optimizer.zero_grad()
            logits = model(x)
            loss = criterion(logits, y)
            loss.backward()
            optimizer.step()

        train_metrics = evaluate_metrics(
            model,
            train_embeddings,
            train_labels,
            criterion,
            batch_size=batch_size,
            device=device,
        )
        msg = (
            f"Epoch {epoch}/{epochs} - train_loss: {train_metrics['loss']:.4f}, "
            f"train_acc: {train_metrics['acc']:.4f}, "
            f"train_f1: {train_metrics['f1']:.4f}, "
            f"train_auc: {train_metrics['auc']:.4f}"
        )
        if val_embeddings is not None and val_labels is not None:
            val_metrics = evaluate_metrics(
                model,
                val_embeddings,
                val_labels,
                criterion,
                batch_size=batch_size,
                device=device,
            )
            msg += (
                f", val_loss: {val_metrics['loss']:.4f}, "
                f"val_acc: {val_metrics['acc']:.4f}, "
                f"val_f1: {val_metrics['f1']:.4f}, "
                f"val_auc: {val_metrics['auc']:.4f}"
            )
        print(msg)

    return model


if __name__ == "__main__":
    print(
        "This module provides utilities for training an MLP classifier on embeddings."
    )
